# When a commit is pushed with text matching v*, i.e. v1.0, v20.15.10, creates a new release
name: Docker build, release and push to DockerHub

on:
  push

env:
  RELEASE: snpaas-cli
  TITLE: "SNPaaS client"
  DOCKER_IMAGE_REPO: eu.gcr.io/halfpipe-io
  DOCKER_IMAGE_NAME: snpaas-tools
  DOCKER_BUILD_DIR: docker/snpaas-tools
  VERSION: 3.${{ github.run_number }}.0
  REGISTRY: eu.gcr.io


jobs:
  build:
    name: Docker Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.docker.outputs.version }}
      name: ${{ steps.docker.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ env.DOCKER_IMAGE_REPO }}/${{ env.DOCKER_IMAGE_NAME }}
          VERSION=${{ env.VERSION }}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCR_PRIVATE_KEY }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.DOCKER_BUILD_DIR }}
          pull: true
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-to: type=inline
          push: ${{ github.event_name != 'pull_request' }}
          tags: latest,${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

