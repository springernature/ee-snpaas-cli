#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Command line program to easily interact with SNPaaS services and products
"""
# Python 2 and 3 compatibility
from __future__ import unicode_literals, print_function
import subprocess
import sys
import re
import os
import argparse

__program__ = "snpaas"
__version__ = "0.1.2"
__author__ = "EE"
__year__ = "2018"
__email__ = "<engineering-enablement@springernature.com>"
__url__ = "https://github.com/springernature/ee-snpaas-cli"
__license__ = "MIT"
__purpose__ = """
SNPaaS Command line program is based on Docker. This command is just a python
wrapper for docker to execute:

docker run --rm -v $(pwd):/data -it platformengineering/snpaas-tools "${@}"

It makes easy to distribute a client for everybody. All the important things
are done within the container.

Potentially it should run on Windows by installing Docker client command line
and delegating the execution to a box with docker daemon running (by defining
the proper environment variables), for example: the bastion host.

Environment variables for this program:

SNPAAS_DOCKER_IMAGE:
  Docker image to launch. Default is 'platformengineering/snpaas-tools:latest'.
SNPAAS_SUPPRESS_INFO_REGEX:
  Default is '^#'. Regular expression to remove the motd generated by the
  image when it runs the .envrc file of the current folder.
SNPAAS_EXTRA_ENV: Define extra variables to get exported inside the running
  container, plus the default ones defined above.

Environment variables exported inside the running docker container:

  "BOSH_CLIENT"
  "BOSH_CLIENT_SECRET"
  "BOSH_ENVIRONMENT"
  "BOSH_CA_CERT"
  "CREDHUB_SERVER"
  "CREDHUB_CLIENT"
  "CREDHUB_SECRET"
  "CREDHUB_CA_CERT"
  "GCP_PROJECT"
  "GCP_ZONE"
  "GCP_REGION"

If, you want to have Bosh, Credhub or Gcloud automatically loged-in within the
container (automatically) please define those environment variables.
"""

SNPAAS_DOCKER_IMAGE="platformengineering/snpaas-tools:latest"
SNPAAS_SUPPRESS_INFO_REGEX='^#'
SNPAAS_EXTRA_ENV=""
DOCKER_RUN_EXPORTED_ENV_VARS=[
  "BOSH_CLIENT",
  "BOSH_CLIENT_SECRET",
  "BOSH_ENVIRONMENT",
  "BOSH_CA_CERT",
  "CREDHUB_SERVER",
  "CREDHUB_CLIENT",
  "CREDHUB_SECRET",
  "CREDHUB_CA_CERT",
  "GCP_PROJECT",
  "GCP_ZONE",
  "GCP_REGION",
]


# Make it ready for windows
def docker_check():
    command=["docker", "info"]
    null = open(os.devnull, 'wb')
    try:
        subprocess.check_call(command, stdout=null, stderr=subprocess.STDOUT)
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            raise ValueError("Please install docker client!: %s" % e)
        else:
            # Something else went wrong while trying to run `wget`
            raise
    except subprocess.CalledProcessError as e:
        raise ValueError("Please check your docker environment!: %s" % e)


def docker_run_interactive(image, volumes=[], extra_args=[], envs=[], initial_regex=None):
    command=['docker', 'run', '--rm', '-it']
    intial_regex_skipped=True if initial_regex else False
    for volume in volumes:
        command.append('-v')
        paths = volume.split(':')
        if len(paths) == 2:
            command.append("%s:%s" % (os.path.abspath(paths[0]), paths[1]))
        elif len(paths) == 3:
            command.append("%s:%s:%s" % (os.path.abspath(paths[0]), paths[1], paths[2]))
        else:
            raise ValueError("Only volumes with format <host-path>:<container-path> are supported")
    for e in envs:
        if e in os.environ:
            command = command + ['--env', e]
    command = command + [str(image)] + extra_args
    #print(command)
    proc = subprocess.Popen(command, stdout=subprocess.PIPE)
    while proc.returncode is None:
        outputline = proc.stdout.readline()
        if intial_regex_skipped:
            intial_regex_skipped = re.match(initial_regex, outputline) != None
        else:
            sys.stdout.write(outputline.decode("utf-8"))
        proc.poll()
    return proc.returncode


def main():
    # Argument parsing
    epilog = __purpose__ + '\n'
    epilog += __version__ + ', ' + __year__ + ' '
    epilog += __author__ + ' ' + __email__ + '\n' + __url__
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=__doc__, epilog=epilog)
    parser.add_argument('-q', '--quiet', help='Suppress info motd using regex defined by SNPAAS_SUPPRESS_INFO_REGEX', default=False, action='store_true')
    parser.add_argument('-v', '--volume', help='Use path as volume instead of taking the current folder', default='.', type=str, action='store')
    parser.add_argument('arg', help='Arguments or commands to run', default=[], nargs='*')
    args = parser.parse_args()
    # Read other parameters for the inventory
    volumes = ["%s:/data" % args.volume]
    image = os.getenv('SNPAAS_DOCKER_IMAGE', SNPAAS_DOCKER_IMAGE)
    if args.quiet:
        info_regex=os.getenv('SNPAAS_SUPPRESS_INFO_REGEX', SNPAAS_SUPPRESS_INFO_REGEX)
    else:
        info_regex = None
    extra_env_list = os.getenv('SNPAAS_EXTRA_ENV', SNPAAS_EXTRA_ENV).split()
    all_env_list = DOCKER_RUN_EXPORTED_ENV_VARS + extra_env_list
    try:
        docker_check()
        sys.exit(docker_run_interactive(image, volumes, args.arg, all_env_list, info_regex))
    except Exception as e:
        print(str(e), file=sys.stderr)
        print("SNPaaS documentation: %s" % __url__, file=sys.stderr)
        sys.exit(1)
    sys.exit(0)


if __name__ == "__main__":
    main()

